name: CI/CD Pipeline - Docker Flask App

on:
  push:
    branches:
      - master  # Activado cuando se realizan cambios en la rama 'master', asegurando integración y despliegue continuos (CI/CD).

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # El trabajo se ejecuta en un entorno Ubuntu, compatible con herramientas de **DevOps** y prácticas de escalabilidad.

    steps:
      # Paso 1: Hacer checkout del código
      - name: Checkout code
        uses: actions/checkout@v3
        # Asegura que siempre se construya el código más reciente para el **despliegue** y **escalabilidad** de la aplicación en cualquier entorno.

      # Paso 2: Iniciar sesión en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # Proporciona autenticación segura para **desplegar** las imágenes y facilitar su distribución en cualquier entorno.

      # Paso 3: Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:latest .
        # Construye la imagen Docker, asegurando que la aplicación sea **escalable** y portable a cualquier entorno, permitiendo su replicación.

      # Paso 4: Hacer push de la imagen Docker a Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
        # Realiza el **despliegue** en Docker Hub, facilitando la implementación en producción y proporcionando una vía para **monitorear** la aplicación mientras se ejecuta.
